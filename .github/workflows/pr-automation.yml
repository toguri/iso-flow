name: PR Automation

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # PR作成者を自動的にAssigneeに設定
  auto-assign-author:
    name: Auto Assign Author
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    steps:
      - uses: toshimaru/auto-author-assign@v2.1.1

  # PRサイズ分析とラベリング
  analyze-pr-size:
    name: Analyze PR Size
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          separator: ","
      
      - name: Analyze and Label PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });
            
            // Analyze PR size
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total_changes = additions + deletions;
            const changed_files = pr.changed_files;
            
            let size_label = '';
            let size_emoji = '';
            
            if (total_changes < 10) {
              size_label = 'size/XS';
              size_emoji = '🟢';
            } else if (total_changes < 50) {
              size_label = 'size/S';
              size_emoji = '🟢';
            } else if (total_changes < 200) {
              size_label = 'size/M';
              size_emoji = '🟡';
            } else if (total_changes < 500) {
              size_label = 'size/L';
              size_emoji = '🟠';
            } else {
              size_label = 'size/XL';
              size_emoji = '🔴';
            }
            
            // Remove old size labels and add new one
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: pr_number
            });
            
            const sizeLabels = labels.data
              .filter(label => label.name.startsWith('size/'))
              .map(label => label.name);
            
            for (const label of sizeLabels) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: pr_number,
                name: label
              }).catch(() => {}); // Ignore if label doesn't exist
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr_number,
              labels: [size_label]
            }).catch(() => {}); // Ignore if label doesn't exist
            
            // Post analysis comment only for newly opened PRs
            if (context.payload.action === 'opened') {
              let comment = `## 📊 PR Analysis Report\n\n`;
              comment += `### ${size_emoji} Size Analysis\n`;
              comment += `- **Total Changes**: ${total_changes} lines (+${additions} -${deletions})\n`;
              comment += `- **Files Changed**: ${changed_files}\n`;
              comment += `- **Size Category**: ${size_label}\n\n`;
              
              // Large PR warning
              if (total_changes > 500) {
                comment += `### ⚠️ Large PR Warning\n`;
                comment += `This PR contains ${total_changes} lines of changes. Consider:\n`;
                comment += `- Breaking it into smaller, focused PRs\n`;
                comment += `- Adding more detailed documentation\n`;
                comment += `- Requesting multiple reviewers\n\n`;
              }
              
              // File type analysis
              const files = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',');
              const hasTests = files.some(f => f.includes('test') || f.includes('spec'));
              const hasDocs = files.some(f => f.includes('.md') || f.includes('README'));
              const hasConfig = files.some(f => f.includes('config') || f.includes('.toml') || f.includes('.yaml') || f.includes('.yml'));
              
              comment += `### 📋 Quick Check\n`;
              comment += `- ${hasTests ? '✅' : '❓'} Tests included\n`;
              comment += `- ${hasDocs ? '✅' : '❓'} Documentation updated\n`;
              comment += `- ${hasConfig ? '⚠️' : '✅'} ${hasConfig ? 'Configuration changes detected' : 'No configuration changes'}\n`;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment
              });
            }