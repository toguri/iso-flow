name: Code Coverage

on:
  push:
    branches: [ feature/initial-setup ]
    paths:
      - 'backend/**'
      - '.github/workflows/coverage.yml'
  pull_request:
    branches: [ feature/initial-setup ]
    paths:
      - 'backend/**'
      - '.github/workflows/coverage.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy, llvm-tools-preview
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-
    
    - name: Install cargo-llvm-cov
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo install cargo-llvm-cov
        fi
    
    - name: Setup test database
      run: |
        echo "DATABASE_URL=sqlite://test.db" > .env
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        cargo llvm-cov report --summary-only
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate coverage summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cargo llvm-cov report >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage
        COVERAGE=$(cargo llvm-cov report --summary-only | grep "TOTAL" | awk '{print $NF}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        
        # Define threshold
        THRESHOLD=60
        
        # Compare with threshold
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below threshold of $THRESHOLD%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets threshold of $THRESHOLD%"
        fi