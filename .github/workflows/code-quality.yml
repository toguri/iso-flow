name: Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.rs'
      - '**.toml'
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'

jobs:
  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'rust') || contains(github.event.pull_request.labels.*.name, 'backend')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check code formatting
        working-directory: backend
        run: |
          echo "🎨 Checking code formatting..."
          cargo fmt -- --check
      
      - name: Run Clippy lints
        working-directory: backend
        run: |
          echo "📋 Running Clippy for code quality..."
          cargo clippy -- -D warnings
      
      - name: Check for unsafe code
        working-directory: backend
        run: |
          echo "🔒 Checking for unsafe code blocks..."
          if grep -r "unsafe" --include="*.rs" src/; then
            echo "⚠️ Found unsafe code blocks. Please review carefully."
          else
            echo "✅ No unsafe code found."
          fi
      
      - name: Check TODO/FIXME comments
        run: |
          echo "📝 Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.rs" backend/src/; then
            echo "📌 Found TODO/FIXME comments that should be addressed."
          else
            echo "✅ No TODO/FIXME comments found."
          fi

  terraform-quality:
    name: Terraform Code Quality
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'terraform') || contains(github.event.pull_request.labels.*.name, 'infrastructure')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Format Check
        run: |
          echo "🎨 Checking Terraform formatting..."
          terraform fmt -check -recursive terraform/
      
      - name: Terraform Validate
        run: |
          echo "✅ Validating Terraform configurations..."
          for dir in terraform/environments/*/; do
            echo "Validating $dir"
            terraform -chdir="$dir" init -backend=false
            terraform -chdir="$dir" validate
          done
      
      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
      
      - name: Run TFLint
        run: |
          echo "🔍 Running TFLint..."
          tflint --init
          tflint --recursive

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for outdated dependencies (Rust)
        if: hashFiles('backend/Cargo.lock')
        working-directory: backend
        run: |
          echo "📦 Checking for outdated Rust dependencies..."
          cargo install cargo-outdated || true
          cargo outdated --exit-code 1 || echo "⚠️ Some dependencies are outdated"
      
      - name: Audit dependencies for vulnerabilities (Rust)
        if: hashFiles('backend/Cargo.lock')
        working-directory: backend
        run: |
          echo "🔒 Auditing Rust dependencies for vulnerabilities..."
          cargo audit

  code-complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'rust') || contains(github.event.pull_request.labels.*.name, 'backend')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install complexity tools
        run: |
          cargo install tokei
          cargo install cargo-geiger || true
      
      - name: Code statistics
        run: |
          echo "📊 Code Statistics:"
          tokei backend/
      
      - name: Check for complex functions
        working-directory: backend
        run: |
          echo "🔍 Checking code complexity..."
          # Simple complexity check - functions over 50 lines
          find src -name "*.rs" -exec awk '/^[[:space:]]*(pub[[:space:]]+)?(async[[:space:]]+)?fn/ {start=NR} 
            /^[[:space:]]*}[[:space:]]*$/ {if(NR-start>50) print FILENAME":"start" Function is "NR-start" lines long"}' {} \;

  pr-comment:
    name: Post Analysis Summary
    runs-on: ubuntu-latest
    needs: [rust-quality, terraform-quality, security-scan, dependency-check, code-complexity]
    if: always()
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            const jobs = [
              { name: 'Rust Code Quality', status: '${{ needs.rust-quality.result }}' },
              { name: 'Terraform Quality', status: '${{ needs.terraform-quality.result }}' },
              { name: 'Security Scan', status: '${{ needs.security-scan.result }}' },
              { name: 'Dependency Check', status: '${{ needs.dependency-check.result }}' },
              { name: 'Code Complexity', status: '${{ needs.code-complexity.result }}' }
            ];
            
            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⚠️';
              }
            };
            
            let comment = '## 🤖 Automated Code Review Summary\n\n';
            comment += '| Check | Status |\n|-------|--------|\n';
            
            jobs.forEach(job => {
              if (job.status !== 'skipped') {
                comment += `| ${job.name} | ${statusEmoji(job.status)} ${job.status} |\n`;
              }
            });
            
            comment += '\n### 💡 Tips\n';
            comment += '- Run `cargo fmt` locally to fix formatting issues\n';
            comment += '- Run `cargo clippy` to check for common mistakes\n';
            comment += '- Run `terraform fmt -recursive` to format Terraform files\n';
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });