name: PR Analysis

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  analyze-changes:
    name: Analyze PR Changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          separator: ","
      
      - name: Analyze PR size and complexity
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });
            
            // Analyze PR size
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total_changes = additions + deletions;
            const changed_files = pr.changed_files;
            
            let size_label = '';
            let size_emoji = '';
            
            if (total_changes < 10) {
              size_label = 'size/XS';
              size_emoji = '🟢';
            } else if (total_changes < 50) {
              size_label = 'size/S';
              size_emoji = '🟢';
            } else if (total_changes < 200) {
              size_label = 'size/M';
              size_emoji = '🟡';
            } else if (total_changes < 500) {
              size_label = 'size/L';
              size_emoji = '🟠';
            } else {
              size_label = 'size/XL';
              size_emoji = '🔴';
            }
            
            // Add size label
            try {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr_number,
                labels: [size_label]
              });
            } catch (e) {
              console.log('Could not add label:', e.message);
            }
            
            // Create analysis comment
            let comment = `## 📊 PR Analysis Report\n\n`;
            comment += `### ${size_emoji} Size Analysis\n`;
            comment += `- **Total Changes**: ${total_changes} lines (${additions} additions, ${deletions} deletions)\n`;
            comment += `- **Files Changed**: ${changed_files}\n`;
            comment += `- **Size Category**: ${size_label}\n\n`;
            
            // Provide recommendations based on size
            if (total_changes > 500) {
              comment += `### ⚠️ Large PR Warning\n`;
              comment += `This PR contains ${total_changes} lines of changes. Consider:\n`;
              comment += `- Breaking it into smaller, focused PRs\n`;
              comment += `- Adding more detailed documentation\n`;
              comment += `- Requesting multiple reviewers\n\n`;
            }
            
            // Check for common patterns
            const files = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',');
            
            const hasTests = files.some(f => f.includes('test') || f.includes('spec'));
            const hasDocs = files.some(f => f.includes('.md') || f.includes('README'));
            const hasConfig = files.some(f => f.includes('config') || f.includes('.toml') || f.includes('.yaml'));
            
            comment += `### 📋 Checklist\n`;
            comment += `- ${hasTests ? '✅' : '❌'} Tests included\n`;
            comment += `- ${hasDocs ? '✅' : '❌'} Documentation updated\n`;
            comment += `- ${hasConfig ? '⚠️' : '✅'} ${hasConfig ? 'Configuration changes detected - please review carefully' : 'No configuration changes'}\n`;
            
            // Add file type breakdown
            const fileTypes = {};
            files.forEach(file => {
              const ext = file.split('.').pop();
              fileTypes[ext] = (fileTypes[ext] || 0) + 1;
            });
            
            if (Object.keys(fileTypes).length > 0) {
              comment += `\n### 📁 File Type Breakdown\n`;
              Object.entries(fileTypes).sort((a, b) => b[1] - a[1]).forEach(([ext, count]) => {
                comment += `- **.${ext}**: ${count} file${count > 1 ? 's' : ''}\n`;
              });
            }
            
            // Post comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });

  suggest-reviewers:
    name: Suggest Reviewers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze code ownership
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: pr_number
            });
            
            // Simple reviewer suggestion based on file paths
            const suggestions = new Set();
            
            files.forEach(file => {
              if (file.filename.includes('backend/')) {
                suggestions.add('Backend changes detected');
              }
              if (file.filename.includes('terraform/')) {
                suggestions.add('Infrastructure changes detected');
              }
              if (file.filename.includes('.github/')) {
                suggestions.add('CI/CD changes detected');
              }
            });
            
            if (suggestions.size > 0) {
              let comment = `### 🔍 Review Focus Areas\n\n`;
              suggestions.forEach(area => {
                comment += `- ${area}\n`;
              });
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment
              });
            }