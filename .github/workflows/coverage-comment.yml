name: Coverage Comment

on:
  workflow_run:
    workflows: ["PR Checks"]
    types:
      - completed

permissions:
  pull-requests: write
  contents: read
  actions: read

jobs:
  comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download workflow artifacts
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR number
        id: pr-info
        run: |
          if [ -f pr-number/pr-number.txt ]; then
            PR_NUMBER=$(cat pr-number/pr-number.txt)
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "Found PR number: $PR_NUMBER"
          else
            echo "No PR number found"
            exit 1
          fi

      - name: Parse coverage report
        id: coverage
        run: |
          # XMLパースツールをインストール
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          
          # カバレッジデータを解析
          if [ -f "coverage-report/cobertura.xml" ]; then
            # 全体のカバレッジ率を取得
            COVERAGE=$(xmlstarlet sel -t -v "//coverage/@line-rate" coverage-report/cobertura.xml | awk '{printf "%.1f", $1 * 100}')
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            
            # カバレッジサマリーを読み込む
            if [ -f "coverage-report/coverage-summary.txt" ]; then
              echo "summary<<EOF" >> $GITHUB_OUTPUT
              cat coverage-report/coverage-summary.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "summary=No coverage data available" >> $GITHUB_OUTPUT
          fi

      - name: Create coverage comment
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt('${{ steps.pr-info.outputs.pr-number }}');
            const currentCoverage = parseFloat('${{ steps.coverage.outputs.coverage }}');
            const summary = `${{ steps.coverage.outputs.summary }}`;
            
            // カバレッジレポートのマークダウンを生成
            let comment = `## Coverage Report 📊\n\n`;
            comment += `**Total Coverage**: ${currentCoverage.toFixed(1)}%\n\n`;
            
            // サマリーの詳細を追加
            if (summary && summary !== 'No coverage data available') {
              comment += `<details>\n<summary>Coverage Summary</summary>\n\n`;
              comment += `\`\`\`\n${summary}\n\`\`\`\n`;
              comment += `</details>\n\n`;
            }
            
            comment += `---\n`;
            comment += `- Generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)\n`;
            comment += `- Excludes test files and migrations\n`;
            comment += `- Includes ignored tests\n`;
            
            // 既存のカバレッジコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Coverage Report')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing coverage comment');
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('Created new coverage comment');
            }